  <style>
    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: 'Inter', sans-serif;
      background-color: #0d0d1c;
      color: white;
    }

    a {
      text-decoration: none;
      color: inherit;
    }

    header {
      background-color: #0b0b1a;
      padding: 1rem 1.5rem;
      display: flex;
      flex-wrap: wrap; /* âœ… Added for mobile */
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    nav {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    nav a {
      font-weight: 500;
    }

    nav a:hover {
      color: #6366f1;
    }

    .btn {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      border: 1px solid transparent;
    }

    .btn-outline {
      background: transparent;
      border: 1px solid white;
      color: white;
    }

    .btn-outline:hover {
      background: white;
      color: black;
    }

    .btn-primary {
      background-color: white;
      color: black;
    }

    .hero {
      padding: 4rem 1.5rem;
      background: linear-gradient(135deg, rgba(79, 70, 229, 0.1), rgba(99, 102, 241, 0.05));
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 2rem;
    }

    .hero-text {
      max-width: 500px;
    }

    .hero-badge {
      display: inline-flex;
      align-items: center;
      background: rgba(255, 255, 255, 0.1);
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.875rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .hero h1 {
      font-size: 2.5rem;
      line-height: 1.2;
      font-weight: 800;
    }

    .highlight {
      color: #818cf8;
      display: block;
    }

    .hero p {
      color: rgba(255, 255, 255, 0.8);
      font-size: 1.125rem;
      margin: 1rem 0 2rem;
    }

    .hero-buttons a {
      display: inline-block;
      margin-right: 1rem;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      text-align: center;
      font-weight: 600;
    }

    .hero-buttons .btn-primary {
      background-color: #6366f1;
      color: white;
    }

    .hero-buttons .btn-primary:hover {
      background-color: #4f46e5;
    }

    .hero-buttons .btn-secondary {
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: white;
    }

    .hero-buttons .btn-secondary:hover {
      background-color: white;
      color: black;
    }

    .dashboard {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 1rem;
      padding: 1.5rem;
      backdrop-filter: blur(12px);
      position: relative;
      z-index: 1;
      max-width: 400px;
      width: 100%;
    }

    .dashboard h3 {
      font-size: 1.125rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .dashboard .stats {
      display: flex;
      justify-content: space-between;
      margin-top: 1rem;
      flex-wrap: wrap;
    }

    .dashboard .stats div {
      font-size: 1.25rem;
      font-weight: bold;
    }

    .chart {
      margin-top: 1.5rem;
      height: 8rem;
      display: flex;
      align-items: flex-end;
      justify-content: space-around;
      gap: 0.25rem;
    }

    .chart div {
      width: 0.5rem;
      background-color: #818cf8;
      border-radius: 3px 3px 0 0;
    }

    .section {
      padding: 4rem 1.5rem;
      text-align: center;
    }

    .section h2 {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 1rem;
    }

    .section p {
      max-width: 600px;
      margin: 0 auto 3rem;
      font-size: 1.125rem;
      color: rgba(255, 255, 255, 0.8);
    }

    .features-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 2rem;
    }

    .feature {
      background: rgba(255, 255, 255, 0.05);
      padding: 1.5rem;
      border-radius: 1rem;
      transition: box-shadow 0.3s ease;
    }

    .feature:hover {
      box-shadow: 0 0 15px rgba(255, 255, 255, 0.1);
    }

    .benefits {
      display: grid;
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    @media(min-width: 1024px) {
      .hero h1 {
        font-size: 3.75rem;
      }

      .benefits {
        grid-template-columns: 1fr 1fr;
      }
    }

    .benefits-list {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .benefits-list div {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1rem;
    }

    .get-started-box {
      background: rgba(255, 255, 255, 0.05);
      padding: 2rem;
      border-radius: 1rem;
      text-align: center;
    }

    .get-started-box a {
      display: block;
      margin: 0.75rem 0;
      padding: 0.75rem 1.25rem;
      font-weight: 600;
      border-radius: 6px;
    }

    .get-started-box .btn-primary {
      background-color: #6366f1;
      color: white;
    }

    .get-started-box .btn-secondary {
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: white;
    }

    .get-started-box .btn-secondary:hover {
      background-color: white;
      color: black;
    }

    .placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    /* âœ… Additional responsive improvements */
    @media (max-width: 768px) {
      .hero-buttons a {
        display: block;
        margin-bottom: 1rem;
        margin-right: 0;
      }

      .dashboard {
        max-width: 100%;
      }
    }
  </style>




  Later, we can:

Dynamically show user data using Flask variables (e.g., {{ user.name }})

Load activity logs from the database

Add avatars and preferences

Would you like to proceed with the dashboard.html or a tool launch page template next?


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



import os
import sqlite3
import datetime
from flask import Flask, render_template, request, redirect, url_for, session, flash
from dotenv import load_dotenv
from tools_engine import run_tool
from werkzeug.security import generate_password_hash, check_password_hash

# Load environment variables from .env
load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY')

# Load DB path from .env
DATABASE = os.getenv('DATABASE_URL').replace("sqlite:///", "")

# Connect to DB
def get_db_connection():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

# Initialize the DB
def init_db():
    if not os.path.exists(DATABASE):
        with get_db_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    firstname TEXT NOT NULL,
                    lastname TEXT NOT NULL,
                    username TEXT NOT NULL UNIQUE,
                    email TEXT NOT NULL,
                    password TEXT NOT NULL,
                    plan TEXT DEFAULT 'Free Tier',
                    last_login TEXT,
                    tools_used INTEGER DEFAULT 0
                )
            ''')
            conn.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/tools/<tool_name>', methods=['GET', 'POST'])
def tool(tool_name):
    if 'user' not in session:
        flash('Please log in to access tools.', 'warning')
        return redirect('/login')

    output = None
    description_map = {
        "ai-writer": "Generate professional content using AI for blogs, emails, or documents.",
        "code-assistant": "Get code snippets, debugging help, or quick functions from AI.",
        "design-helper": "Design support using AI for wireframes or mockups.",
        "legal-advisor": "Generate legal templates, contracts, or get quick AI legal info.",
        "health-bot": "Ask health-related questions powered by AI (not medical advice)."
    }

    if request.method == 'POST':
        user_input = request.form.get('inputData', '').strip()

        if user_input:
            output = f"ðŸ”® AI says: \"{user_input}\" reversed is \"{user_input[::-1]}\""
            flash("Tool launched successfully!", "success")

            # Update tools_used count
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET tools_used = tools_used + 1 WHERE id = ?', (session['user']['id'],))
            conn.commit()
            conn.close()
        else:
            flash("Please provide some input.", "warning")

    return render_template(
        'tool_template.html',  # Make sure the file is named this way
        tool_name=tool_name.replace('-', ' ').title(),
        tool_description=description_map.get(tool_name, "Use AI to boost productivity."),
        output=output,
        user=session['user']
    )


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        firstname = request.form['firstname']
        lastname = request.form['lastname']
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        if cursor.fetchone():
            flash('Username already exists. Choose another one.', 'danger')
            return redirect('/register')

        cursor.execute('''
            INSERT INTO users (firstname, lastname, username, email, password)
            VALUES (?, ?, ?, ?, ?)
        ''', (firstname, lastname, username, email, password))
        conn.commit()
        conn.close()

        flash('Registration successful! Please login.', 'success')
        return redirect('/login')

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
        user = cursor.fetchone()

        if user:
            now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute('UPDATE users SET last_login = ? WHERE id = ?', (now, user['id']))
            conn.commit()

            session['user'] = {
                'id': user['id'],
                'firstname': user['firstname'],
                'lastname': user['lastname'],
                'username': user['username'],
                'email': user['email']
            }

            conn.close()
            return redirect('/profile')
        else:
            conn.close()
            flash('Invalid login credentials.', 'danger')

    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user' in session:
        return render_template('dashboard.html', user=session['user'])
    else:
        flash('Please log in to continue.', 'warning')
        return redirect(url_for('login'))

@app.route('/logout')
def logout():
    session.pop('user', None)
    flash('Logged out successfully.', 'info')
    return redirect(url_for('index'))

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/contact')
def contact():
    return render_template('contact.html')

@app.route('/profile')
def profile():
    if 'user' not in session:
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT firstname, lastname, email, plan, last_login, tools_used 
        FROM users WHERE id = ?
    ''', (session['user']['id'],))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        flash('User not found.', 'danger')
        return redirect('/logout')

    user_profile = {
        'name': f"{user_data['firstname']} {user_data['lastname']}",
        'email': user_data['email'],
        'plan': user_data['plan'],
        'last_login': user_data['last_login'],
        'tools_used': user_data['tools_used']
    }

    return render_template('profile.html', user=session['user'], profile=user_profile)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)